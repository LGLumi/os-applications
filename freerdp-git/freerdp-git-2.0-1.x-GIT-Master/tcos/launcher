#!/usr/bin/env python

# standard modules
import os
import shutil
import signal
import string
import subprocess
import sys
import tempfile
import commands
import pytcos.tcos as tcos

# to have a test
# /usr/bin/xfreerdp /sec:rdp /bpp:16 /kbd:0x00000407 +clipboard /a:smartcard /a:drive,media,/media /w:1024 /h:768 /d:opentc /v:otc-tserver /u:user /p:lalal

l = tcos.Launcher()
u = tcos.Util()

ExitAction = l.ENTRY.get('General.ExitAction', '')

Port = l.ENTRY.get('Application.Port', '')
Server = l.ENTRY.get('Application.Server', '')

manualParameters = l.ENTRY.get('Application.ConnectionParameters.Parameter', '')
if l.ENTRY.get('Application.ConnectionParameters.ProtocolSecurity', 'none') == 'none' :
	ProtocolSecurity = ''
else:
	ProtocolSecurity = ' /sec:' + l.ENTRY.get('Application.ConnectionParameters.ProtocolSecurity', 'rdp')

Domain = l.ENTRY.get('Application.Account.Domain', '')
User = l.ENTRY.get('Application.Account.User', '')
Password = l.ENTRY.get('Application.Account.Password', '')
activateSSO = l.ENTRY.get('Application.Account.activateSSO','no')

# color depth
if l.ENTRY.get('Application.Window.ColorDepth', '32') == '_system_' :
	ColorDepth = ' /bpp:' +  commands.getoutput('xwininfo -root | grep Depth | awk \'{print $2}\'')
	#ColorDepth = ' /bpp:' + str(u.getScreenDepth()).strip('(\')') # u.getScreenDepth() sucks, it returns tuples
else:
	ColorDepth = ' /bpp:' + l.ENTRY.get('Application.Window.ColorDepth', '32')
if l.ENTRY.get('Application.ConnectionParameters.KeyboardLayout', 'none') == 'none' :
	KeyboardLayout = ''
else:
	KeyboardLayout = ' /kbd:' + l.ENTRY.get('Application.ConnectionParameters.KeyboardLayout', '0x00020409')

# set some  always used parameters in front of line 
Parameters = ProtocolSecurity + ColorDepth + KeyboardLayout

# add bool parameters if needed
if l.ENTRY.get('Application.ConnectionParameters.Fullscreen', 'yes') == 'yes':  
	Parameters += ' /f' 
if l.ENTRY.get('Application.ConnectionParameters.redirectClipboard', 'no') == 'yes':  
	Parameters += ' +clipboard' 
if l.ENTRY.get('Application.ConnectionParameters.AudioMode', 'yes') == 'yes':
	Parameters += ' /sound:sys:pulse'
if l.ENTRY.get('Application.ConnectionParameters.Mic', 'no') == 'yes':
	Parameters += ' /microphone'
if l.ENTRY.get('Application.ConnectionParameters.redirectSmartcard', 'yes') == 'yes':
	Parameters += ' /smartcard'
if l.ENTRY.get('Application.ConnectionParameters.redirectMedia', 'yes') == 'yes':
	Parameters += ' "/drive:USB,/media"'	# we need to quote the parameter, otherwise os.system eats the commas
if l.ENTRY.get('Application.ConnectionParameters.smoothFonts', 'no') == 'yes':
	Parameters += ' +fonts'
if l.ENTRY.get('Application.ConnectionParameters.GDIrendering', 'none') == 'hw':
	Parameters += ' /gdi:hw'
elif l.ENTRY.get('Application.ConnectionParameters.GDIrendering', 'none') == 'sw':
	Parameters += ' /gdi:sw'
if l.ENTRY.get('Application.ConnectionParameters.remoteFX', 'no') == 'yes':
	Parameters += ' /rfx'

#if l.ENTRY.get('Application.ConnectionParameters.', 'no') == 'yes':
#	Parameters += ''

# all the window positioning stuff
#
if l.ENTRY.get('Application.Window.Multimon', 'no') == 'yes':
	Parameters += ' /f /multimon:force'
else:	
	WindowType = l.ENTRY.get('Application.Window.WindowType', 'none')
	#
	# CAVAET: is the second display always the right one?
	# What in case the user sets --left-of in xrandr?
	#
	if WindowType == 'fullscreen_primary':
		Parameters += ' /f /monitors:0 ' 
	elif WindowType == 'fullscreen_primary_TB':
		if os.getenv('firstscreenWidth') == "" or os.getenv('firstscreenHeigth') == "" :
			Parameters += ' /f /monitors:0 ' # fallback
		else:
			Parameters += ' -decorations /size:' + os.getenv('firstscreenWidth') + 'x' + str(int(os.getenv('firstscreenHeigth'))-25) + '+0+25' + ' /monitors:0 ' 
	elif WindowType == 'fullscreen_secondary':
		Parameters += ' /f /monitors:1 ' 
	elif WindowType == 'manual':
		#  have window decoration while using manual size
		Parameters += ' +decorations /size:' + l.ENTRY.get('Application.Window.Width', '800') + 'x' + l.ENTRY.get('Application.Window.Height', '600') + ' '

	
# have the manual parameters 	
Parameters += ' ' + manualParameters
	
# add session credentials if not empty
if Domain != '': Parameters += ' /d:' + Domain 
if Port != '': Parameters += ' /port:' + Port
if Server != '': Parameters += ' /v:' + Server

# SSo vs. no SSO
if activateSSO != 'yes':
	# if SSO is NOT used
	if User != '': 
		Parameters += ' /u:' + User 
		if Password != '': 
			Parameters += ' /p:' + Password
else:
	# if SSO is used
	User = os.getenv('USER') # get systems username
	UserToken = os.getenv('TCOS_TOKEN')
	if User != "tcos" and User != "" and UserToken != None:
		Parameters += ' /u:' + User 
		try:
                        if os.path.isfile('/usr/local/bin/sso-tcos-auth'):
                                Auth = os.popen('/usr/local/bin/sso-tcos-auth')
                                Password = Auth.read()
                                Auth.close()
                                if Password != "":
                                        Parameters += ' /p:' + Password
                except:
                        pass

#StartCmdline = ' '.join(['/usr/bin/xfreerdp', 
	#Parameters.strip()
	#])


StartCmdline = '/opt/freerdp-git/bin/xfreerdp' + Parameters

#print StartCmdline
#sys.exit()

while True:
	returncode = os.system(StartCmdline)
	if ExitAction != 'Restart':
		break
if ExitAction == 'Logout':
	os.system("tcos-logout")
elif ExitAction == 'Reboot':
	os.system("tcos-reboot")
elif ExitAction == 'Shutdown':
	os.system("tcos-shutdown")
